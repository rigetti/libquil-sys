/* automatically generated by rust-bindgen */

pub const libquil_error_t_LIBQUIL_ERROR_SUCCESS: libquil_error_t = 0;
pub const libquil_error_t_LIBQUIL_ERROR_FAIL: libquil_error_t = 1;
pub type libquil_error_t = u32;
extern "C" {
    pub static mut libquil_error: ::std::option::Option<
        unsafe extern "C" fn(result: *mut *mut ::std::os::raw::c_char) -> libquil_error_t,
    >;
}
pub const program_memory_type_t_LIBQUIL_TYPE_BIT: program_memory_type_t = 0;
pub const program_memory_type_t_LIBQUIL_TYPE_OCTET: program_memory_type_t = 1;
pub const program_memory_type_t_LIBQUIL_TYPE_INTEGER: program_memory_type_t = 2;
pub const program_memory_type_t_LIBQUIL_TYPE_REAL: program_memory_type_t = 3;
pub type program_memory_type_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quil_program__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_quil_program__() {
    assert_eq!(
        ::std::mem::size_of::<quil_program__>(),
        4usize,
        concat!("Size of: ", stringify!(quil_program__))
    );
    assert_eq!(
        ::std::mem::align_of::<quil_program__>(),
        4usize,
        concat!("Alignment of ", stringify!(quil_program__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<quil_program__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(quil_program__),
            "::",
            stringify!(unused)
        )
    );
}
pub type quil_program = *mut quil_program__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chip_specification__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_chip_specification__() {
    assert_eq!(
        ::std::mem::size_of::<chip_specification__>(),
        4usize,
        concat!("Size of: ", stringify!(chip_specification__))
    );
    assert_eq!(
        ::std::mem::align_of::<chip_specification__>(),
        4usize,
        concat!("Alignment of ", stringify!(chip_specification__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chip_specification__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(chip_specification__),
            "::",
            stringify!(unused)
        )
    );
}
pub type chip_specification = *mut chip_specification__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quilc_version_info__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_quilc_version_info__() {
    assert_eq!(
        ::std::mem::size_of::<quilc_version_info__>(),
        4usize,
        concat!("Size of: ", stringify!(quilc_version_info__))
    );
    assert_eq!(
        ::std::mem::align_of::<quilc_version_info__>(),
        4usize,
        concat!("Alignment of ", stringify!(quilc_version_info__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<quilc_version_info__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(quilc_version_info__),
            "::",
            stringify!(unused)
        )
    );
}
pub type quilc_version_info = *mut quilc_version_info__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quilc_compilation_metadata__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_quilc_compilation_metadata__() {
    assert_eq!(
        ::std::mem::size_of::<quilc_compilation_metadata__>(),
        4usize,
        concat!("Size of: ", stringify!(quilc_compilation_metadata__))
    );
    assert_eq!(
        ::std::mem::align_of::<quilc_compilation_metadata__>(),
        4usize,
        concat!("Alignment of ", stringify!(quilc_compilation_metadata__))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<quilc_compilation_metadata__>())).unused as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(quilc_compilation_metadata__),
            "::",
            stringify!(unused)
        )
    );
}
pub type quilc_compilation_metadata = *mut quilc_compilation_metadata__;
extern "C" {
    pub static mut quilc_get_version_info: ::std::option::Option<
        unsafe extern "C" fn(result: *mut quilc_version_info) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_version_info_version: ::std::option::Option<
        unsafe extern "C" fn(
            version_info: quilc_version_info,
            ptr: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_version_info_githash: ::std::option::Option<
        unsafe extern "C" fn(
            version_info: quilc_version_info,
            ptr: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_parse_quil: ::std::option::Option<
        unsafe extern "C" fn(
            source: *mut ::std::os::raw::c_char,
            result: *mut quil_program,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_program_memory_type: ::std::option::Option<
        unsafe extern "C" fn(
            program: quil_program,
            region_name: *mut ::std::os::raw::c_char,
            region_type_ptr: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_print_program:
        ::std::option::Option<unsafe extern "C" fn(program: quil_program) -> libquil_error_t>;
}
extern "C" {
    pub static mut quilc_compile_quil: ::std::option::Option<
        unsafe extern "C" fn(
            program: quil_program,
            chip_spec: chip_specification,
            result: *mut quil_program,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_compilation_metadata_len: ::std::option::Option<
        unsafe extern "C" fn(
            metadata: quilc_compilation_metadata,
            result: *mut ::std::os::raw::c_int,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_compilation_metadata_get_final_rewiring: ::std::option::Option<
        unsafe extern "C" fn(
            metadata: quilc_compilation_metadata,
            final_rewiring_ptr: *mut ::std::os::raw::c_void,
            final_rewiring_len_ptr: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_compilation_metadata_get_gate_volume: ::std::option::Option<
        unsafe extern "C" fn(
            metadata: quilc_compilation_metadata,
            gate_volume_ptr: *mut ::std::os::raw::c_void,
            result: *mut ::std::os::raw::c_int,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_compilation_metadata_get_gate_depth: ::std::option::Option<
        unsafe extern "C" fn(
            metadata: quilc_compilation_metadata,
            gate_depth_ptr: *mut ::std::os::raw::c_void,
            result: *mut ::std::os::raw::c_int,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_compilation_metadata_get_multiqubit_gate_depth: ::std::option::Option<
        unsafe extern "C" fn(
            metadata: quilc_compilation_metadata,
            gate_depth_ptr: *mut ::std::os::raw::c_void,
            result: *mut ::std::os::raw::c_int,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_compilation_metadata_get_topological_swaps: ::std::option::Option<
        unsafe extern "C" fn(
            metadata: quilc_compilation_metadata,
            gate_depth_ptr: *mut ::std::os::raw::c_void,
            result: *mut ::std::os::raw::c_int,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_compilation_metadata_get_program_duration: ::std::option::Option<
        unsafe extern "C" fn(
            metadata: quilc_compilation_metadata,
            duration_ptr: *mut ::std::os::raw::c_void,
            result: *mut ::std::os::raw::c_int,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_compilation_metadata_get_program_fidelity: ::std::option::Option<
        unsafe extern "C" fn(
            metadata: quilc_compilation_metadata,
            fidelity_ptr: *mut ::std::os::raw::c_void,
            result: *mut ::std::os::raw::c_int,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_compilation_metadata_get_qpu_runtime_estimation: ::std::option::Option<
        unsafe extern "C" fn(
            metadata: quilc_compilation_metadata,
            runtime_ptr: *mut ::std::os::raw::c_void,
            result: *mut ::std::os::raw::c_int,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_compile_protoquil: ::std::option::Option<
        unsafe extern "C" fn(
            program: quil_program,
            chip_spec: chip_specification,
            metata_ptr: *mut ::std::os::raw::c_void,
            result: *mut quil_program,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_build_nq_linear_chip: ::std::option::Option<
        unsafe extern "C" fn(
            n: ::std::os::raw::c_int,
            result: *mut chip_specification,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_print_chip_spec: ::std::option::Option<
        unsafe extern "C" fn(chip_spec: chip_specification) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_parse_chip_spec_isa_json: ::std::option::Option<
        unsafe extern "C" fn(
            isa_json: *mut ::std::os::raw::c_char,
            result: *mut chip_specification,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_program_string: ::std::option::Option<
        unsafe extern "C" fn(
            program: quil_program,
            ptr: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_conjugate_pauli_by_clifford: ::std::option::Option<
        unsafe extern "C" fn(
            pauli_indices: *mut ::std::os::raw::c_void,
            pauli_indices_len: ::std::os::raw::c_int,
            pauli_terms: *mut ::std::os::raw::c_void,
            pauli_terms_len: ::std::os::raw::c_int,
            clifford: quil_program,
            phase: *mut ::std::os::raw::c_void,
            pauli: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut quilc_generate_rb_sequence: ::std::option::Option<
        unsafe extern "C" fn(
            depth: ::std::os::raw::c_int,
            qubits: ::std::os::raw::c_int,
            gateset_ptr: *mut ::std::os::raw::c_void,
            gateset_len: ::std::os::raw::c_int,
            seed_ptr: *mut ::std::os::raw::c_void,
            interleaver: *mut ::std::os::raw::c_void,
            results_ptr: *mut ::std::os::raw::c_void,
            result_lens_ptr: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qvm_multishot_addresses__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_qvm_multishot_addresses__() {
    assert_eq!(
        ::std::mem::size_of::<qvm_multishot_addresses__>(),
        4usize,
        concat!("Size of: ", stringify!(qvm_multishot_addresses__))
    );
    assert_eq!(
        ::std::mem::align_of::<qvm_multishot_addresses__>(),
        4usize,
        concat!("Alignment of ", stringify!(qvm_multishot_addresses__))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<qvm_multishot_addresses__>())).unused as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qvm_multishot_addresses__),
            "::",
            stringify!(unused)
        )
    );
}
pub type qvm_multishot_addresses = *mut qvm_multishot_addresses__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qvm_multishot_result__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_qvm_multishot_result__() {
    assert_eq!(
        ::std::mem::size_of::<qvm_multishot_result__>(),
        4usize,
        concat!("Size of: ", stringify!(qvm_multishot_result__))
    );
    assert_eq!(
        ::std::mem::align_of::<qvm_multishot_result__>(),
        4usize,
        concat!("Alignment of ", stringify!(qvm_multishot_result__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qvm_multishot_result__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qvm_multishot_result__),
            "::",
            stringify!(unused)
        )
    );
}
pub type qvm_multishot_result = *mut qvm_multishot_result__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qvm_version_info__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_qvm_version_info__() {
    assert_eq!(
        ::std::mem::size_of::<qvm_version_info__>(),
        4usize,
        concat!("Size of: ", stringify!(qvm_version_info__))
    );
    assert_eq!(
        ::std::mem::align_of::<qvm_version_info__>(),
        4usize,
        concat!("Alignment of ", stringify!(qvm_version_info__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<qvm_version_info__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(qvm_version_info__),
            "::",
            stringify!(unused)
        )
    );
}
pub type qvm_version_info = *mut qvm_version_info__;
extern "C" {
    pub static mut qvm_get_version_info: ::std::option::Option<
        unsafe extern "C" fn(result: *mut qvm_version_info) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_version_info_version: ::std::option::Option<
        unsafe extern "C" fn(
            version_info: qvm_version_info,
            result_ptr: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_version_info_githash: ::std::option::Option<
        unsafe extern "C" fn(
            version_info: qvm_version_info,
            result_ptr: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_multishot_addresses_new: ::std::option::Option<
        unsafe extern "C" fn(result: *mut qvm_multishot_addresses) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_multishot_addresses_set: ::std::option::Option<
        unsafe extern "C" fn(
            addresses: qvm_multishot_addresses,
            name: *mut ::std::os::raw::c_char,
            indices: *mut ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_multishot_addresses_set_all: ::std::option::Option<
        unsafe extern "C" fn(
            addresses: qvm_multishot_addresses,
            name: *mut ::std::os::raw::c_char,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_multishot: ::std::option::Option<
        unsafe extern "C" fn(
            program: quil_program,
            addresses: qvm_multishot_addresses,
            trials: ::std::os::raw::c_int,
            gate_noise: *mut ::std::os::raw::c_void,
            measurement_noise: *mut ::std::os::raw::c_void,
            rng_seed: *mut ::std::os::raw::c_void,
            result: *mut qvm_multishot_result,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_multishot_result_get: ::std::option::Option<
        unsafe extern "C" fn(
            qvm_result: qvm_multishot_result,
            region_name: *mut ::std::os::raw::c_char,
            region_index: ::std::os::raw::c_int,
            result: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_multishot_result_get_all: ::std::option::Option<
        unsafe extern "C" fn(
            qvm_result: qvm_multishot_result,
            region_name: *mut ::std::os::raw::c_char,
            shot_index: ::std::os::raw::c_int,
            result: *mut ::std::os::raw::c_void,
            result_len: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_multishot_measure: ::std::option::Option<
        unsafe extern "C" fn(
            program: quil_program,
            qubits: *mut ::std::os::raw::c_void,
            n_qubits: ::std::os::raw::c_int,
            trials: ::std::os::raw::c_int,
            rng_seed: *mut ::std::os::raw::c_void,
            result: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_expectation: ::std::option::Option<
        unsafe extern "C" fn(
            state_prep: quil_program,
            operators: *mut ::std::os::raw::c_void,
            n_operators: ::std::os::raw::c_int,
            rng_seed: *mut ::std::os::raw::c_void,
            results_ptr: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_wavefunction: ::std::option::Option<
        unsafe extern "C" fn(
            program: quil_program,
            rng_seed: *mut ::std::os::raw::c_void,
            results_ptr: *mut ::std::os::raw::c_void,
            results_len_ptr: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut qvm_probabilities: ::std::option::Option<
        unsafe extern "C" fn(
            program: quil_program,
            rng_seed: *mut ::std::os::raw::c_void,
            results_ptr: *mut ::std::os::raw::c_void,
        ) -> libquil_error_t,
    >;
}
extern "C" {
    pub static mut lisp_release_handle:
        ::std::option::Option<unsafe extern "C" fn(handle: *mut ::std::os::raw::c_void)>;
}
extern "C" {
    pub static mut lisp_handle_eq: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut ::std::os::raw::c_void,
            b: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn init(core: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}

